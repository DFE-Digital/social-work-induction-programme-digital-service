name: Create App Service Tunnel
description: Uses the app service to tunnel into an accessible host such as the db server

inputs:
  app-service-name:
    description: Name of web app service to tunnel through (requires kudu compatible ssh)
    type: string
    required: true
  resource-group:
    description: Name of resource group that app service belongs to
    type: string
    required: true
  host-name: 
    description: Name of the host to tunnel to
    type: string
    required: true
  port:
    description: Port of the host to tunnel to
    type: string
    required: true
  requires-azure-login:
    default: false

runs:
  using: composite
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        # You can't set an ENV block at the start of a composite workflow :-(
        set -euo pipefail
        echo "HOST_NAME=${{ inputs.host-name }}" >> $GITHUB_ENV
        echo "SSH_PORT=2222" >> $GITHUB_ENV

    - name: Log in to Azure CLI
      if: ${{ inputs.requires-azure-login == true }}
      uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5  # v2
      with:
        client-id: ${{ env.AZ_CLIENT_ID }}
        tenant-id: ${{ env.AZ_TENANT_ID }}
        subscription-id: ${{ env.AZ_SUBSCRIPTION_ID }}

    - name: Install sshpass
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y sshpass

      # Background a TCP‐over‐WebSocket “remote connection” on port 2222
    - name: Open SSH tunnel to Web App container
      id: ssh-tunnel
      shell: bash
      run: |
        set -euo pipefail
        az webapp create-remote-connection \
          --resource-group "${{ inputs.resource-group }}" \
          --name "${{ inputs.app-service-name }}" \
          --port $SSH_PORT & 
        echo $! > az.pid

    - name: Wait for tunnel port to be ready
      shell: bash
      run: |
        set -euo pipefail
        echo "Waiting for local SSH tunnel on $SSH_PORT"
        for i in {1..20}; do
          if nc -z 127.0.0.1 $SSH_PORT; then
            echo "✅ SSH connection ready: ${{ inputs.app-service-name }}"
            exit 0
          fi
          sleep 1
        done
        exit 1

    - name: Forward specified port through SSH
      # Some callers may only need the initial SSH connection and not the tunnel
      if: ${{ inputs.host-name != '' }}
      shell: bash
      run: |
        set -euo pipefail

        # open the tunnel (-f) *after* it succeeds (--exit-on-forward-failure)
        sshpass -p "$AZURE_KUDU_SSH_PASSWORD" ssh \
          -N \
          -o TCPKeepAlive=no \
          -o ServerAliveInterval=15 \
          -o ServerAliveCountMax=3 \
          -o Ciphers=aes128-ctr \
          -o Compression=no \
          -o ExitOnForwardFailure=yes \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -L ${{ inputs.port }}:$HOST_NAME:${{ inputs.port }} \
          -p $SSH_PORT "$AZURE_KUDU_SSH_USER@127.0.0.1" &
        echo $! > ssh.pid

        # SSH exits non-zero if the forward failed
        echo "SSH tunnel established, pid=$(pgrep -f 'ssh .*${{ inputs.port }}')"

        # now actively wait for the local port to be open
        for i in {1..10}; do
          if nc -z 127.0.0.1 ${{ inputs.port }}; then
            echo "Port ${{ inputs.port }} is now listening"
            break
          fi
          sleep 1
          echo "Waiting for port ${{ inputs.port }}… ($i/10)"
        done

        # final check
        nc -z 127.0.0.1 ${{ inputs.port }} \
          || { echo "ERROR: can't open SSH tunnel to port ${{ inputs.port }}" >&2; exit 1; }

        echo "✅ Tunnel ready: 127.0.0.1:${{ inputs.port }} → remote host $HOST_NAME"
