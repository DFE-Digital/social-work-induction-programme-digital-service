name: Build Image and Publish to ACR

inputs:
  environment:
    type: string
    required: true
  environment-instance:
    type: string
    required: true
  pre-build-script:
    type: string
  docker-build-folder:
    type: string
    required: true
  docker-build-file:
    type: string
    default: Dockerfile
  base-image-version:
    type: string
    default: ''
  docker-image-name:
    type: string
    required: true
  build-args: 
    type: string
    description: Semicolon separated list of build arguments (key1=value1;key2=value2)
    default: ''
  build-secrets:
    description: Semicolon separated list of build secrets (secret1=secretname1;secret2=secretname2)
    default: ''
  build-target:
    type: string
    description: Dockerfile build target
    required: true

outputs:
  docker-image-tag:
    description: "The tag of the image pushed to the ACR"
    value: ${{ steps.return.outputs.docker-image-tag }}
  dev-resource-name-prefix:
    description: "The resource name prefix for the Dev environment"
    value: ${{ steps.return.outputs.dev-resource-name-prefix }}


runs:
  using: composite
  steps:
    - name: Log in to Azure CLI
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZ_CLIENT_ID }}
        tenant-id: ${{ env.AZ_TENANT_ID }}
        subscription-id: ${{ env.AZ_SUBSCRIPTION_ID }}

    # Need to retrieve ACR_NAME in particular for next steps
    - name: Load Terraform variables
      uses: ./.github/actions/pre-process-terraform-variables
      with:
        environment: ${{ inputs.environment-instance }}
        add_as_env_vars: true

    - name: Azure Container Registry login
      shell: bash
      run: az acr login --name ${{ env.ACR_NAME }}
      env:
        ACR_NAME: ${{ env.ACR_NAME }}

    - name: Extract the supplied docker build arguments
      id: extract-docker-build-args
      uses: ./.github/actions/extract-docker-build-args
      with:
        build-args: ${{ inputs.build-args }}
        build-secrets: ${{ inputs.build-secrets }}

    - name: Format Docker image tag
      id: get-docker-image-tag
      uses: ./.github/actions/get-standard-image-tag
      with:
        acr-name: ${{ env.ACR_NAME }}
        base-image-version: ${{ inputs.base-image-version }}
        docker-image-name: ${{ inputs.docker-image-name }}

    - name: Run pre-build script
      if: inputs.pre-build-script != ''
      shell: bash
      env:
        PRE_BUILD_SCRIPT: ${{ inputs.pre-build-script }}
      run: |
        chmod +x $PRE_BUILD_SCRIPT
        $PRE_BUILD_SCRIPT

    - name: Docker build
      shell: bash
      env:
        DOCKER_BUILDKIT: 1
        BUILD_ARGS: ${{ steps.extract-docker-build-args.outputs.build-arg-string }}
        BUILD_SECRETS: ${{ steps.extract-docker-build-args.outputs.secret-arg-string }}
        STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
      run: |
        cd ${{ inputs.docker-build-folder }}
        
        echo "Docker build: specified args - ${{ inputs.build-args }}, ${{ inputs.build-secrets }}"
        echo "Docker build: Using extracted build args - $BUILD_ARGS, secrets - $BUILD_SECRETS"

        docker build \
          $BUILD_ARGS \
          $BUILD_SECRETS \
          --build-arg FULL_TAG=$STANDARD_IMAGE_TAG \
          -f "./${{ inputs.docker-build-file }}" \
          --network=host \
          --target ${{ inputs.build-target }} \
          -t "$STANDARD_IMAGE_TAG" .

    - name: Docker image stats
      shell: bash
      run: docker image inspect ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}

    - name: Docker push
      shell: bash
      run: docker push "${{ steps.get-docker-image-tag.outputs.standard-image-tag }}"

    - name: Return outputs
      id: return
      shell: bash
      env:
        STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
      run: |
        echo "docker-image-tag=$STANDARD_IMAGE_TAG" >> $GITHUB_OUTPUT
        # Returned as a convenience if the caller wants to subsequently deploy to dev
        echo "dev-resource-name-prefix=${{ env.RESOURCE_NAME_PREFIX }}" >> $GITHUB_OUTPUT
