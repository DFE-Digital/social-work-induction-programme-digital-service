name: 'DB Operation'
description: 'Run database backup or restore operations via function app'
inputs:
  instance:
    description: 'Environment instance (d01, d02, d03)'
    required: true
  db-name:
    description: 'Database name (moodle, usermanagement)'
    required: true
  action:
    description: 'Action to perform (backup, restore)'
    required: true
  backup-file-name:
    description: 'Backup file name (required for restore)'
    required: false
  client-id:
    description: 'Azure client ID'
    required: true
  tenant-id:
    description: 'Azure tenant ID'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}

    - name: Get Function Key from Key Vault
      shell: bash
      run: |
        FUNCTION_KEY=$(az keyvault secret show \
          --name "DbOperationsService-FunctionKey" \
          --vault-name "s205${{ inputs.instance }}-kv-primary" \
          --query value -o tsv)
        echo "FUNCTION_KEY=$FUNCTION_KEY" >> $GITHUB_ENV

    - name: Validate inputs
      shell: bash
      run: |
        # Validate action parameter
        if [ "${{ inputs.action }}" != "backup" ] && [ "${{ inputs.action }}" != "restore" ]; then
          echo "Error: Invalid action '${{ inputs.action }}'. Must be 'backup' or 'restore'."
          exit 1
        fi

        # Validate that restore operations have a backup file name
        if [ "${{ inputs.action }}" = "restore" ] && [ -z "${{ inputs.backup-file-name }}" ]; then
          echo "Error: backup-file-name is required when action is 'restore'"
          exit 1
        fi

        # Validate that backup operations don't have a backup file name (should be empty)
        if [ "${{ inputs.action }}" = "backup" ] && [ -n "${{ inputs.backup-file-name }}" ]; then
          echo "Error: backup-file-name should not be provided when action is 'backup'"
          exit 1
        fi

    - name: Call DB Operations Function
      shell: bash
      run: |
        ENDPOINT="https://s205${{ inputs.instance }}-fd-ops-trigger.azurefd.net/api/DbOperationsFunction"
        STORAGE_ACCOUNT="s205${{ inputs.instance }}sabackups"
        CONTAINER="s205${{ inputs.instance }}-${{ inputs.db-name }}-backups"

        if [ "${{ inputs.action }}" = "restore" ]; then
          JSON_PAYLOAD=$(cat <<EOF
        {
          "action": "restore",
          "databaseName": "${{ inputs.db-name }}",
          "storageAccount": "$STORAGE_ACCOUNT",
          "containerName": "$CONTAINER",
          "backupFileName": "${{ inputs.backup-file-name }}"
        }
        EOF
        )
        else
          JSON_PAYLOAD=$(cat <<EOF
        {
          "action": "backup",
          "databaseName": "${{ inputs.db-name }}",
          "storageAccount": "$STORAGE_ACCOUNT",
          "containerName": "$CONTAINER"
        }
        EOF
        )
        fi

        echo "DB Operation: ${{ inputs.action }} ${{ inputs.db-name }} on ${{ inputs.instance }}"
        echo "Endpoint: $ENDPOINT"

        RESPONSE=$(curl -X POST "$ENDPOINT?code=$FUNCTION_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          -w "\nHTTP_STATUS:%{http_code}")

        HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/d')

        echo "Response status: $HTTP_STATUS"
        echo "Response body: $RESPONSE_BODY"

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "DB operation failed: ${{ inputs.action }} ${{ inputs.db-name }} on ${{ inputs.instance }}"
          exit 1
        fi
