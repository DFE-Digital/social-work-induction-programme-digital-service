run-name: "Terraform Deploy - ${{inputs.environment}} (${{inputs.action}})"
name: "Terraform Deploy"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Azure deployment environment"
        required: true
        default: Dev
        type: choice
        options:
          - Dev
          - Test

      action:
        description: "Test the planned changes or plan and apply the changes"
        default: "Plan Only"
        type: choice
        options:
          - "Plan Only"
          - "Plan & Apply"

defaults:
  run:
    working-directory: ./terraform

#permissions for oidc auth
permissions:
  id-token: write
  contents: write
  issues: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_SKIP_PROVIDER_REGISTRATION: true

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # Terraform is pinned to the version below - this should be reviewed regularly
          terraform_version: 1.11.3
          terraform_wrapper: false

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -diff -check

      # Login to Azure using OIDC
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      # Generates Terraform input variables by merging the global and environment variables
      # Supports substitution of global variable values in environment specific variables
      - name: Load Terraform Variables
        uses: ./.github/actions/pre-process-terraform-variables
        with:
          environment: ${{ inputs.environment }}
          add_as_env_vars: true

      - name: Generate Terraform State Variables
        shell: bash
        run: |
          export TF_VAR_FILE=/tmp/merged.tfvars
          export RESOURCE_NAME_PREFIX=$(awk -F'"' '/resource_name_prefix/ {print $2}' $TF_VAR_FILE)
          echo "TF_STATE_AZURE_REGION=$(awk -F'\"' '/azure_region/ {print $2}' $TF_VAR_FILE)" >> $GITHUB_ENV
          echo "TF_STATE_RESOURCE_GROUP=$RESOURCE_NAME_PREFIX-swip-rg-tfstate" >> $GITHUB_ENV
          echo "TF_STATE_STORAGE_ACCOUNT_NAME=${RESOURCE_NAME_PREFIX}swipsatfstate" >> $GITHUB_ENV
          echo "TF_STATE_CONTAINER_NAME=${RESOURCE_NAME_PREFIX}swipconttfstate" >> $GITHUB_ENV
          echo "TF_STATE_KEY=$RESOURCE_NAME_PREFIX-swip-tfstate" >> $GITHUB_ENV
          echo "TF_VAR_FILE=$TF_VAR_FILE" >> $GITHUB_ENV

      # Idempotent step - create Terraform state resources if they don't exist
      # CIP policy requires use of standard tags for resources
      - name: Ensure Terraform State Resources Exist
        run: |
          export ENVIRONMENT_TAG=$(awk -F'"' '/environment_tag/ {print $2}' $TF_VAR_FILE)
          export PARENT_BUSINESS_TAG=$(awk -F'"' '/parent_business_tag/ {print $2}' $TF_VAR_FILE)
          export PRODUCT_TAG=$(awk -F'"' '/product_tag/ {print $2}' $TF_VAR_FILE)
          export SERVICE_OFFERING_TAG=$(awk -F'"' '/service_offering_tag/ {print $2}' $TF_VAR_FILE)
          export TAGS=(
            "Environment=$ENVIRONMENT_TAG"
            "Parent Business=$PARENT_BUSINESS_TAG"
            "Product=$PRODUCT_TAG"
            "Service Offering=$SERVICE_OFFERING_TAG"
          )
          chmod +x ./scripts/init-tf-state.sh
          ./scripts/init-tf-state.sh $TF_STATE_AZURE_REGION $TF_STATE_RESOURCE_GROUP $TF_STATE_STORAGE_ACCOUNT_NAME $TF_STATE_CONTAINER_NAME $TF_STATE_KEY "${TAGS[@]}"

      - name: Terraform Init
        run: >
          terraform init
          -backend-config="resource_group_name=$TF_STATE_RESOURCE_GROUP"
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
          -backend-config="key=$TF_STATE_KEY"

      # Generates an execution plan for Terraform, exit codes:
      # - 0 indicated no changes
      # - 1 a terraform failure
      # - 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          # Only import the variables we need
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var-file=$TF_VAR_FILE \
            -var='moodle_admin_password=${{ secrets.MOODLE_ADMIN_PASSWORD }}' \
            -var='moodle_admin_email=${{ vars.MOODLE_ADMIN_EMAIL }}' \
            -var='moodle_admin_user=${{ vars.MOODLE_ADMIN_USER }}' \
            -var='auth_service_client_id=${{ vars.AUTH_SERVICE_CLIENT_ID }}' \
            -var='auth_service_client_secret=${{ secrets.AUTH_SERVICE_CLIENT_SECRET }}' \
            -var='one_login_client_id=${{ vars.ONE_LOGIN_CLIENT_ID }}' \
            || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Terraform Apply
        if: ${{ inputs.action == 'Plan & Apply' }}
        env:
          TF_VAR_moodle_admin_password: ${{ secrets.MOODLE_ADMIN_PASSWORD }}
        run: terraform apply -auto-approve tfplan
