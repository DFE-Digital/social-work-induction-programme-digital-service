name: Build Image and Publish to ACR

on:
  workflow_call:
    inputs:
      docker-build-folder:
        type: string
        required: true
      docker-build-file:
        type: string
        required: true
      org-name:
        type: string
        default: dfe-digital
      project-name:
        type: string
        default: swip-digital-service
      docker-image-name:
        type: string
        required: true
      base-image-version:
        type: string
        default: ''
      build-args:
        type: string
        default: ''
      build-secrets:
        type: string
        default: ''
      app-secret-names:
        description: |
          New-line-separated list of Key Vault secret names
          (must line up 1-for-1 with secret-values)
      app-secret-values:
        description: |
          New-line-separated list of secret values,
          **use GitHub Secrets here** (same order as secret-names)
      web-app-name:
        type: string
        default: ''

    outputs:
      docker-image-tag:
        description: "The tag of the image pushed to the ACR"
        value: ${{ jobs.build-image.outputs.docker-image-tag }}
      dev-resource-name-prefix:
        description: "The resource name prefix for the Dev environment"
        value: ${{ jobs.build-image.outputs.dev-resource-name-prefix }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-image:
    runs-on: ubuntu-24.04
    environment: Dev
    name: Build & Publish Image
    # Permissions for OIDC authentication
    permissions:
      id-token: write
      contents: write
      issues: write
    outputs:
      docker-image-tag: ${{ steps.return.outputs.docker-image-tag }}
      dev-resource-name-prefix: ${{ steps.return.outputs.dev-resource-name-prefix }}
    env:
      ENVIRONMENT: Dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Log in to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      # Need to retrieve ACR_NAME in particular for next steps
      - name: Load Terraform Variables
        uses: ./.github/actions/pre-process-terraform-variables
        with:
          environment: ${{ env.ENVIRONMENT }}
          add_as_env_vars: true

      - name: Azure Container Registry Login
        run: az acr login --name ${{ env.ACR_NAME }}
        env:
          ACR_NAME: ${{ env.ACR_NAME }}

      - name: Format standard image tag
        run: |
          COMMIT_HASH=${{ github.sha }}
          COMMIT_HASH_SHORT="${COMMIT_HASH:0:7}"
          BUILD_DATE=$(date +%Y%m%d)
          if [[ -n "${{ inputs.base-image-version }}" ]]; then
            BASE_VERSION="${{ inputs.base-image-version }}-"
          fi
          echo COMMIT_HASH_SHORT="$COMMIT_HASH_SHORT" >> $GITHUB_ENV
          FULL_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ inputs.org-name }}-${{inputs.project-name}}/${{ inputs.docker-image-name }}:$BASE_VERSION$BUILD_DATE.$COMMIT_HASH_SHORT"
          if [[ "${{ github.ref_name }}" != "main" ]]; then
            FULL_TAG="$FULL_TAG.dev"
          fi
          echo FULL_TAG="$FULL_TAG" >> $GITHUB_ENV
          echo "Docker build: full tag - $FULL_TAG"

      - name: Docker build
        env:
          DOCKER_BUILDKIT: 1
          AZURE_KUDU_SSH_PASSWORD: ${{ secrets.AZURE_KUDU_SSH_PASSWORD }}
        run: |
          cd ${{ inputs.docker-build-folder }}
          echo "Docker build: specified build args - ${{ inputs.build-args }}"

          BUILD_ARGS=""
          # Split build args by semicolon
          IFS=';' read -ra KVPAIRS <<< "${{ inputs.build-args }}"
          for pair in "${KVPAIRS[@]}"; do
            trimmed=$(echo "$pair" | xargs)
            if [[ -n "$trimmed" ]]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg $trimmed"
            fi
          done

          SECRET_ARGS=""
          IFS=';' read -ra SECRETS <<< "${{ inputs.build-secrets }}"
          for secret in "${SECRETS[@]}"; do
            trimmed=$(echo "$secret" | xargs)
            if [[ "$trimmed" == "AZURE_KUDU_SSH_PASSWORD" ]]; then
              SECRET_ARGS="$SECRET_ARGS --secret id=AZURE_KUDU_SSH_PASSWORD,env=AZURE_KUDU_SSH_PASSWORD"
            fi
          done
          
          echo "Docker build: Using build args - $BUILD_ARGS, secrets - $SECRET_ARGS"
          docker build \
            $BUILD_ARGS \
            $SECRET_ARGS \
            -f "./${{ inputs.docker-build-file }}" \
            -t "${{ env.FULL_TAG }}" .

      - name: Push Image
        run: docker push "${{ env.FULL_TAG }}"

      - name: Optional sync Key Vault secrets (Dev)
        if: inputs.web-app-name != '' && inputs.app-secret-names != ''
        uses: ./.github/actions/sync-key-vault-secrets
        with:
          vault-name: ${{ env.RESOURCE_NAME_PREFIX }}-kv-primary
          secret-names: ${{ inputs.app-secret-names }}
          secret-values: ${{ inputs.app-secret-values }}

      - name: Optional deploy to Azure App Services (Dev)
        if: inputs.web-app-name != ''
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.RESOURCE_NAME_PREFIX }}-${{ inputs.web-app-name }}
          images: "${{ env.FULL_TAG }}"

      - name: Return Outputs
        id: return
        run: |
          echo "docker-image-tag=${{ env.FULL_TAG }}" >> $GITHUB_OUTPUT
          # Returned as a convenience if the caller wants to subsequently deploy to dev
          echo "dev-resource-name-prefix=${{ env.RESOURCE_NAME_PREFIX }}" >> $GITHUB_OUTPUT
