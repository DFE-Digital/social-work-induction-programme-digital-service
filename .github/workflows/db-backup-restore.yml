name: DB backup and restore
description: Creates a database backup or restores a database from a backup

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      job-to-run:
        description: "The job to run (backup or restore)"
        required: true
        type: string
      backup-file-name:
        description: "The name of the backup file in Blob Storage to restore"
        required: false
        type: string
      db-name:
        description: "The name of the database to backup/restore"
        required: true
        type: string
      db-host-name:
        description: The name of the database server
        type: string
      instance:
        description: "Environment instance"
        type: string
      app-service-resource-group:
        description: Name of resource group which hosts the app services
        type: string
      tunnel-app-service:
        description: Name of remote app service providing tunnel
        type: string
      tunnel-remote-server-name:
        description: Name of remote server to tunnel to, if tunnelling connection required
        type: string
      tunnel-remote-server-port:
        description: Port of remote server to tunnel to, if tunnelling connection required
        type: string
      storage-account-name:
        description: Name of the storage account where the backup files will be stored
        type: string
      storage-container-name:
        description: Name of the storage container for backup files
        type: string

    # secrets:
    #   AZURE_CLIENT_ID:
    #     required: true
    #   AZURE_TENANT_ID:
    #     required: true
    #   AZURE_SUBSCRIPTION_ID:
    #     required: true
    # KEY_VAULT_NAME:           # might not need this, on proxy server?
    #   required: true
    # DB_USER_SECRET_NAME:      # might not need this, on proxy server?
    #   required: true
    # DB_PASSWORD_SECRET_NAME:  # might not need this, on proxy server?
    #   required: true

jobs:
  backup:
    if: inputs.job-to-run == 'backup'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      issues: write
    environment: ${{ inputs.environment }}
    env:
      AZ_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      AZ_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      AZ_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      REMOTE_TUNNEL_HOST: ${{ inputs.tunnel-remote-server-name }}
      # This will make the credentials available for remote tunnelling
      AZURE_KUDU_SSH_USER: ${{ vars.AZURE_KUDU_SSH_USER }}
      AZURE_KUDU_SSH_PASSWORD: ${{ secrets.AZURE_KUDU_SSH_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.ref }}

      - name: Log in to Azure
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ env.AZ_CLIENT_ID }}
          tenant-id: ${{ env.AZ_TENANT_ID }}
          subscription-id: ${{ env.AZ_SUBSCRIPTION_ID }}

      - name: Map service to actual DB instance
        id: map_name
        run: |
          DB_INSTANCE=""
          case "${{ github.event.inputs.db-name }}" in
            moodle)
              DB_INSTANCE="s205${{ (github.event.inputs.instance == 'None') && 'd01' || github.event.inputs.instance }}_db_moodle_primary"
              ;;
            authservice)
              DB_INSTANCE="s205${{ (github.event.inputs.instance == 'None') && 'd01' || github.event.inputs.instance }}_db_auth_service"
              ;;
          esac
          echo "db_instance=$DB_INSTANCE" >> $GITHUB_OUTPUT

      - name: Establish remote tunnel
        if: inputs.tunnel-app-service != '' && inputs.app-service-resource-group != '' && inputs.tunnel-remote-server-name != '' && inputs.tunnel-remote-server-port != ''
        uses: ./.github/actions/create-app-service-tunnel
        with:
          app-service-name: ${{ inputs.tunnel-app-service }}
          resource-group: ${{ inputs.app-service-resource-group }}
          host-name: ${{ env.REMOTE_TUNNEL_HOST }}
          port: ${{ inputs.tunnel-remote-server-port }}

      # - name: Run backup script
      #   run: |
      #     set -e
      #     if [ -z "$CONNECTIONSTRINGS__DEFAULTCONNECTION" ] || [ -z "$DB_PASSWORD" ]; then
      #       echo "Error: Please set the CONNECTIONSTRINGS__DEFAULTCONNECTION and DB_PASSWORD environment variables."
      #       exit 1
      #     fi
      #     echo "Parsing connection string template..."
      #     DB_HOST=$(echo "$CONNECTIONSTRINGS__DEFAULTCONNECTION" | grep -o 'Host=[^;]*' | cut -d'=' -f2)
      #     DB_USER=$(echo "$CONNECTIONSTRINGS__DEFAULTCONNECTION" | grep -o 'Username=[^;]*' | cut -d'=' -f2)
      #     if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ]; then
      #       echo "Error: Could not parse Host and Username from CONNECTIONSTRINGS__DEFAULTCONNECTION."
      #       exit 1
      #     fi
      #   shell: bash

      - name: Execute remote command via SSH
        uses: azure/CLI@v1
        with:
          inlineScript: |
             az webapp ssh \
               --name s205${{inputs.instance}}-wa-proxy-service
               --resource-group s205${{inputs.instance}}-swip-rg
               --command "echo '--- Environment Variables ---' && printenv && echo '--- Home Directory Listing ---' && ls -l /home"

  restore:
    if: inputs.job-to-run == 'restore'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      issues: write
    steps:
      - name: Check for backup-file-name
        if: inputs.backup-file-name == ''
        run: |
          echo "Error: backup_file_name input is required for the restore job."
          exit 1
      - name: Log in to Azure
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Fetch DB credentials from Key Vault
        run: |
          DB_USER=$(az keyvault secret show --name "${{ secrets.DB_USER_SECRET_NAME }}" --vault-name "${{ secrets.KEY_VAULT_NAME }}" --query value -o tsv)
          DB_PASSWORD=$(az keyvault secret show --name "${{ secrets.DB_PASSWORD_SECRET_NAME }}" --vault-name "${{ secrets.KEY_VAULT_NAME }}" --query value -o tsv)
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "PGPASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        shell: bash

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Download backup from Azure Blob Storage
        uses: azure/CLI@d7e8a34a277107b4de5d53b7f36e5aa0c1dc0592 # v2
        with:
          inlineScript: |
            az storage blob download --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --container-name ${{ secrets.STORAGE_CONTAINER_NAME }} --name ${{ inputs.backup-file-name }} --file ./restore.dump --auth-mode login

      - name: Restore database
        run: |
          psql -h ${{ secrets.AZURE_DB_HOST }} -U ${{ env.DB_USER }} -d postgres -c "DROP DATABASE IF EXISTS ${{ inputs.db-name }};"
          psql -h ${{ secrets.AZURE_DB_HOST }} -U ${{ env.DB_USER }} -d postgres -c "CREATE DATABASE ${{ inputs.db-name }};"
          pg_restore -h ${{ secrets.AZURE_DB_HOST }} -U ${{ env.DB_USER }} -d ${{ inputs.db_name }} -v --no-owner --no-privileges ./restore.dump
