name: Build Image and Publish to ACR

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      environment-instance:
        type: string
        required: true
      working-dir:
        type: string
        required: true
      docker-build-file:
        type: string
        default: Dockerfile
      base-image-version:
        type: string
        default: ""
      docker-image-name:
        type: string
        required: true
      build-args:
        type: string
        description: Semicolon separated list of build arguments (key1=value1;key2=value2)
        default: ""
      build-secrets:
        type: string
        description: Semicolon separated list of build secrets (secret1=secretname1;secret2=secretname2)
        default: ""
      build-target:
        type: string
        description: Dockerfile build target
        required: true
      publish-image:
        required: true
        type: boolean
        description: Whether to publish the Docker image to the registry

    outputs:
      docker-image-tag:
        description: "The tag of the image pushed to the ACR"
        value: ${{ jobs.build-and-publish-image.outputs.docker-image-tag }}
      dev-resource-name-prefix:
        description: "The resource name prefix for the Dev environment"
        value: ${{ jobs.build-and-publish-image.outputs.dev-resource-name-prefix }}

jobs:
  build-and-publish-image:
    name: Build and Publish Image
    runs-on: ubuntu-24.04
    # Permissions for OIDC Azure authentication (az login)
    permissions:
      id-token: write
      contents: write
      issues: write
    environment: ${{ inputs.environment }}
    env:
      # This will make the secret available to Docker Build
      # Any other secrets that need to be added to Docker Build should also be added here
      AZURE_KUDU_SSH_PASSWORD: ${{ secrets.AZURE_KUDU_SSH_PASSWORD }}
      AZ_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      AZ_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      AZ_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
    outputs:
      docker-image-tag: ${{ steps.return.outputs.docker-image-tag }}
      dev-resource-name-prefix: ${{ steps.return.outputs.dev-resource-name-prefix }}

    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@37c927c24552caa0ef6040ab0876db729cc12754 # v1.0.2-beta7

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.ref }}

      - name: Output Inputs
        env:
          GITHUB_INPUTS: ${{ toJSON(github.event.inputs) }}
        run: echo $GITHUB_INPUTS

      - name: Initialise summary values
        shell: bash
        run: |
          cat <<'EOF' >> "$GITHUB_ENV"
          TOOLS_STATUS=⏳ Pending
          RESTORE_STATUS=⏳ Pending
          BUILD_STATUS=⏳ Pending
          TEST_STATUS=⏳ Pending
          PACKAGE_STATUS=⏳ Pending
          DOCKER_BUILD_STATUS=⏳ Pending
          DOCKER_PUSH_STATUS=🚫 Not requested
          TEST_LOG_PATH=
          EOF

      - name: Log in to Azure CLI
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ env.AZ_CLIENT_ID }}
          tenant-id: ${{ env.AZ_TENANT_ID }}
          subscription-id: ${{ env.AZ_SUBSCRIPTION_ID }}

      - name: Install just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Restore tools
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          trap 'echo "TOOLS_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          just ci-install-tools
          echo "TOOLS_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Restore packages / files
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          trap 'echo "RESTORE_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          just ci-restore
          echo "RESTORE_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Build component
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          trap 'echo "BUILD_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          just ci-build
          echo "BUILD_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Run tests
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        env:
          DB_USER: ${{ secrets.TEST_DB_USER }}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          DB_NAME: ecf_test_${{ github.run_id }}
        run: |
          set +e
          set -o pipefail
          TEST_LOG_PATH="${RUNNER_TEMP}/ci-test.log"
          just ci-test | tee "$TEST_LOG_PATH"
          TEST_EXIT=${PIPESTATUS[0]}
          set -e
          set +o pipefail
          if [ $TEST_EXIT -eq 0 ]; then
            echo "TEST_STATUS=✅ Passed" >> "$GITHUB_ENV"
          else
            echo "TEST_STATUS=❌ Failed" >> "$GITHUB_ENV"
          fi
          echo "TEST_LOG_PATH=$TEST_LOG_PATH" >> "$GITHUB_ENV"
          exit $TEST_EXIT

      # Need to retrieve ACR_NAME in particular for next steps
      - name: Load Terraform variables
        uses: ./.github/actions/pre-process-terraform-variables
        with:
          environment: ${{ inputs.environment-instance }}
          add-as-env-vars: true

      - name: Extract the supplied docker build arguments
        id: extract-docker-build-args
        uses: ./.github/actions/extract-docker-build-args
        with:
          build-args: ${{ inputs.build-args }}
          build-secrets: ${{ inputs.build-secrets }}

      - name: Format Docker image tag
        id: get-docker-image-tag
        uses: ./.github/actions/get-standard-image-tag
        with:
          acr-name: ${{ env.ACR_NAME }}
          base-image-version: ${{ inputs.base-image-version }}
          docker-image-name: ${{ inputs.docker-image-name }}

      - name: Package component
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          trap 'echo "PACKAGE_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          just ci-package-component
          echo "PACKAGE_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Azure Container Registry login
        shell: bash
        run: az acr login --name ${{ env.ACR_NAME }}
        env:
          ACR_NAME: ${{ env.ACR_NAME }}

      - name: Docker build
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        env:
          DOCKER_BUILDKIT: 1
          DOCKERFILE: ${{ inputs.docker-build-file }}
          BUILD_ARGS: ${{ steps.extract-docker-build-args.outputs.build-arg-string }}
          BUILD_SECRETS: ${{ steps.extract-docker-build-args.outputs.secret-arg-string }}
          STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
        run: |
          set -euo pipefail
          trap 'echo "DOCKER_BUILD_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          echo "Docker build: specified args - ${{ inputs.build-args }}, ${{ inputs.build-secrets }}"
          echo "Docker build: Using extracted build args - $BUILD_ARGS, secrets - $BUILD_SECRETS"

          DOCKERFILE_DIR="$(dirname "$DOCKERFILE")"
          DOCKERFILE_NAME="$(basename "$DOCKERFILE")"
          if [[ "$DOCKERFILE_DIR" != "." ]]; then
            echo "🔀 Switching into $DOCKERFILE_DIR for build"
            cd "$DOCKERFILE_DIR"
          fi

          docker build \
            $BUILD_ARGS \
            $BUILD_SECRETS \
            --build-arg FULL_TAG=$STANDARD_IMAGE_TAG \
            -f "./$DOCKERFILE_NAME" \
            --network=host \
            --target ${{ inputs.build-target }} \
            -t "$STANDARD_IMAGE_TAG" .

          echo "DOCKER_BUILD_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Docker image stats
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          docker image inspect "${{ steps.get-docker-image-tag.outputs.standard-image-tag }}" | python -c 'import json, sys; data=json.load(sys.stdin)[0]; size_mb=round(data.get("Size", 0)/1024/1024, 2); created=data.get("Created", "").rstrip("Z").replace("T", " "); image_id=data.get("Id", ""); repo_tags=", ".join(data.get("RepoTags", [])); print(f"IMAGE_SIZE_MB={size_mb}"); print(f"IMAGE_CREATED_AT={created}"); print(f"IMAGE_ID={image_id}"); print(f"IMAGE_REPO_TAGS={repo_tags}")' >> "$GITHUB_ENV"

      - name: Docker push
        if: inputs.publish-image == true
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -euo pipefail
          trap 'echo "DOCKER_PUSH_STATUS=❌ Failed" >> "$GITHUB_ENV"' ERR
          docker push "${{ steps.get-docker-image-tag.outputs.standard-image-tag }}"
          echo "DOCKER_PUSH_STATUS=✅ Success" >> "$GITHUB_ENV"
          trap - ERR

      - name: Record docker push skipped
        if: inputs.publish-image != true
        shell: bash
        run: echo "DOCKER_PUSH_STATUS=🚫 Not requested" >> "$GITHUB_ENV"

      - name: Return outputs
        id: return
        shell: bash
        env:
          STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
        run: |
          echo "docker-image-tag=$STANDARD_IMAGE_TAG" >> $GITHUB_OUTPUT
          # Returned as a convenience if the caller wants to subsequently deploy to dev
          echo "dev-resource-name-prefix=${{ env.RESOURCE_NAME_PREFIX }}" >> $GITHUB_OUTPUT

      - name: Publish workflow summary
        if: always()
        shell: bash
        env:
          STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
          ENVIRONMENT_NAME: ${{ inputs.environment }}
          ENVIRONMENT_INSTANCE: ${{ inputs.environment-instance }}
        run: |
          cat <<EOF >> "$GITHUB_STEP_SUMMARY"
          ## Build Summary

          | Stage | Status | Details |
          | --- | --- | --- |
          | Tooling | ${TOOLS_STATUS:-Unknown} | \`just ci-install-tools\` |
          | Restore | ${RESTORE_STATUS:-Unknown} | \`just ci-restore\` |
          | Build | ${BUILD_STATUS:-Unknown} | \`just ci-build\` |
          | Tests | ${TEST_STATUS:-Unknown} | \`just ci-test\` |
          | Package | ${PACKAGE_STATUS:-Unknown} | \`just ci-package-component\` |
          | Docker build | ${DOCKER_BUILD_STATUS:-Unknown} | Target: \`${{ inputs.build-target }}\` |
          | Docker push | ${DOCKER_PUSH_STATUS:-Unknown} | Image: \`${STANDARD_IMAGE_TAG}\` |

          ### Context

          - Environment: ${ENVIRONMENT_NAME} (${ENVIRONMENT_INSTANCE})
          - Image tag: \`${STANDARD_IMAGE_TAG}\`
          - Image size: ${IMAGE_SIZE_MB:-unknown} MB
          - Image created: ${IMAGE_CREATED_AT:-unknown}
          - Image ID: ${IMAGE_ID:-unknown}
          - Repo tags: ${IMAGE_REPO_TAGS:-unknown}
          EOF

          SUMMARY_FILES=()
          if [[ -n "${TEST_SUMMARY_HTML:-}" && -f "${TEST_SUMMARY_HTML}" ]]; then
            SUMMARY_FILES+=("${TEST_SUMMARY_HTML}")
          fi
          if [[ -n "${FRONTEND_TEST_SUMMARY_HTML:-}" && -f "${FRONTEND_TEST_SUMMARY_HTML}" ]]; then
            SUMMARY_FILES+=("${FRONTEND_TEST_SUMMARY_HTML}")
          fi

          if (( ${#SUMMARY_FILES[@]} > 0 )); then
            echo >> "$GITHUB_STEP_SUMMARY"
            echo "### Test Results" >> "$GITHUB_STEP_SUMMARY"
            for summary_file in "${SUMMARY_FILES[@]}"; do
              cat "$summary_file" >> "$GITHUB_STEP_SUMMARY"
              echo >> "$GITHUB_STEP_SUMMARY"
            done
          elif [[ -n "${TEST_LOG_PATH:-}" && -f "${TEST_LOG_PATH}" ]]; then
            {
              echo
              echo "### Test Output (last 20 lines)"
              tail -n 20 "${TEST_LOG_PATH}"
            } >> "$GITHUB_STEP_SUMMARY"
          fi
