name: Build Image and Publish to ACR

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      environment-instance:
        type: string
        required: true
      working-dir:
        type: string
        required: true
      docker-build-file:
        type: string
        default: Dockerfile
      base-image-version:
        type: string
        default: ''
      docker-image-name:
        type: string
        required: true
      build-args: 
        type: string
        description: Semicolon separated list of build arguments (key1=value1;key2=value2)
        default: ''
      build-secrets:
        type: string
        description: Semicolon separated list of build secrets (secret1=secretname1;secret2=secretname2)
        default: ''
      build-target:
        type: string
        description: Dockerfile build target
        required: true
      publish-image:
        required: true
        type: boolean
        description: Whether to publish the Docker image to the registry

    outputs:
      docker-image-tag:
        description: "The tag of the image pushed to the ACR"
        value: ${{ jobs.build-and-publish-image.outputs.docker-image-tag }}
      dev-resource-name-prefix:
        description: "The resource name prefix for the Dev environment"
        value: ${{ jobs.build-and-publish-image.outputs.dev-resource-name-prefix }}

jobs:
  build-and-publish-image:
    name: Build and Publish Image
    runs-on: ubuntu-24.04
    # Permissions for OIDC Azure authentication (az login)
    permissions:
      id-token: write
      contents: write
      issues: write
    environment: ${{ inputs.environment }}
    env:
      # This will make the secret available to Docker Build
      # Any other secrets that need to be added to Docker Build should also be added here
      AZURE_KUDU_SSH_PASSWORD: ${{ secrets.AZURE_KUDU_SSH_PASSWORD }}
      AZ_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      AZ_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      AZ_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      # Used for database required for testing 
      DB_USER: ${{ secrets.TEST_DB_USER }}
      DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      DB_NAME: ecf_test_${{ github.run_id }} 
    outputs:
      docker-image-tag: ${{ steps.return.outputs.docker-image-tag }}
      dev-resource-name-prefix: ${{ steps.return.outputs.dev-resource-name-prefix }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: swpdp
          POSTGRES_DB: swpdp
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER"
          --health-interval=10s --health-timeout=5s --health-retries=10 
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4
        with:
          ref: ${{ github.ref }}

      - name: Output Inputs
        env:
          GITHUB_INPUTS: ${{ toJSON(github.event.inputs) }}
        run: echo $GITHUB_INPUTS

      - name: Log in to Azure CLI
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5  # v2
        with:
          client-id: ${{ env.AZ_CLIENT_ID }}
          tenant-id: ${{ env.AZ_TENANT_ID }}
          subscription-id: ${{ env.AZ_SUBSCRIPTION_ID }}

      # Need to retrieve ACR_NAME in particular for next steps
      - name: Load Terraform variables
        uses: ./.github/actions/pre-process-terraform-variables
        with:
          environment: ${{ inputs.environment-instance }}
          add-as-env-vars: true

      - name: Extract the supplied docker build arguments
        id: extract-docker-build-args
        uses: ./.github/actions/extract-docker-build-args
        with:
          build-args: ${{ inputs.build-args }}
          build-secrets: ${{ inputs.build-secrets }}

      - name: Format Docker image tag
        id: get-docker-image-tag
        uses: ./.github/actions/get-standard-image-tag
        with:
          acr-name: ${{ env.ACR_NAME }}
          base-image-version: ${{ inputs.base-image-version }}
          docker-image-name: ${{ inputs.docker-image-name }}

      - name: Install just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff  # v3

      - name: Restore tools
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: just ci-install-tools

      - name: Restore packages / files
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: just ci-restore

      - name: Build component
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: just ci-build

      - name: Discover and run tests sequentially (shared DB)
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: |
          set -uo pipefail

          # Find all *Tests.csproj under the tests folder
          mapfile -t TEST_PROJECTS < <(find . -path "./Dfe.Sww.Ecf/tests/*/*.Tests.csproj" | sort)

          if (( ${#TEST_PROJECTS[@]} == 0 )); then
            echo "No test projects found!" >&2
            exit 1
          fi

          echo "Found test projects:"
          printf ' - %s\n' "${TEST_PROJECTS[@]}"

          overall=0
          for csproj in "${TEST_PROJECTS[@]}"; do
            echo "===> Testing $csproj"
            if ! dotnet test "$csproj" \ 
                -e ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=$DB_NAME;Username=$DB_USER;Password=$DB_PASSWORD" 
            then
              echo "Tests failed in $csproj"
              overall=1
            else
              echo "Tests passed in $csproj"
            fi
          done

          exit $overall

      - name: Package component
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: just ci-package-component

      - name: Azure Container Registry login
        shell: bash
        run: az acr login --name ${{ env.ACR_NAME }}
        env:
          ACR_NAME: ${{ env.ACR_NAME }}

      - name: Docker build
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        env:
          DOCKER_BUILDKIT: 1
          DOCKERFILE: ${{ inputs.docker-build-file }}
          BUILD_ARGS: ${{ steps.extract-docker-build-args.outputs.build-arg-string }}
          BUILD_SECRETS: ${{ steps.extract-docker-build-args.outputs.secret-arg-string }}
          STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
        run: |
          echo "Docker build: specified args - ${{ inputs.build-args }}, ${{ inputs.build-secrets }}"
          echo "Docker build: Using extracted build args - $BUILD_ARGS, secrets - $BUILD_SECRETS"

          DOCKERFILE_DIR="$(dirname "$DOCKERFILE")"
          DOCKERFILE_NAME="$(basename "$DOCKERFILE")"
          if [[ "$DOCKERFILE_DIR" != "." ]]; then
            echo "ðŸ”€ Switching into $DOCKERFILE_DIR for build"
            cd "$DOCKERFILE_DIR"
          fi

          docker build \
            $BUILD_ARGS \
            $BUILD_SECRETS \
            --build-arg FULL_TAG=$STANDARD_IMAGE_TAG \
            -f "./$DOCKERFILE_NAME" \
            --network=host \
            --target ${{ inputs.build-target }} \
            -t "$STANDARD_IMAGE_TAG" .

      - name: Docker image stats
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: docker image inspect ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}

      - name: Docker push
        if: inputs.publish-image == true
        shell: bash
        working-directory: ${{ inputs.working-dir }}
        run: docker push "${{ steps.get-docker-image-tag.outputs.standard-image-tag }}"

      - name: Return outputs
        id: return
        shell: bash
        env:
          STANDARD_IMAGE_TAG: ${{ steps.get-docker-image-tag.outputs.standard-image-tag }}
        run: |
          echo "docker-image-tag=$STANDARD_IMAGE_TAG" >> $GITHUB_OUTPUT
          # Returned as a convenience if the caller wants to subsequently deploy to dev
          echo "dev-resource-name-prefix=${{ env.RESOURCE_NAME_PREFIX }}" >> $GITHUB_OUTPUT
