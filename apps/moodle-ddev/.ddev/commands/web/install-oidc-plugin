#!/bin/bash
# .ddev/commands/web/install-oidc-plugin
# This command downloads and installs Moodle Open ID Connect (OIDC) authentication plugin and configures it, if not already present. 
# Prerequisite: The Moosh plugin is needed for OIDC plugin configuration.  
# Usage:
#   ddev install-oidc-plugin           # Uses the default release https://moodle.org/plugins/download.php/35133/auth_oidc_moodle45_2024100710.zip
#   ddev install-oidc-plugin https://moodle.org/plugins/download.php/35132/auth_oidc_moodle44_2024042215.zip   # Uses the specified release version

set -e

INSTALL_ACTIONS=${1:-"all"}
OIDC_PLUGIN_RELEASE_URL=${2:-https://moodle.org/plugins/download.php/35133/auth_oidc_moodle45_2024100710.zip}
AUTH_CLIENT_ID=${3:-dfe-sww-ecf-frontend-dev}
AUTH_CLIENT_SECRET=${4:Devel0pm3ntSecr4t}
AUTH_END_POINT=${5:-"https://localhost:7236/oauth2/authorize"}
AUTH_TOKEN_END_POINT=${6:-"https://host.docker.internal:7236/oauth2/token"}
AUTH_LOGOUT_URI=${7:-"https://localhost:7236/oauth2/logout"}

MOODLE_ROOT="/var/www/html/"
MOODLE_PUBLIC="${MOODLE_ROOT}public/"

if [ "$INSTALL_ACTIONS" = "all" ]; then
    INSTALL_ACTIONS="check,copy,upgrade,config"
fi

cd "${MOODLE_PUBLIC}auth" || { echo "Moodle auth directory not found."; exit 1; }

if [[ "$INSTALL_ACTIONS" == *"check"* ]]; then
    echo "Checking if OIDC plugin is installed..."
    if [ -d "oidc" ]; then
        echo "OIDC plugin is already installed."
        exit 0
    fi
    echo "Checking if moosh is installed..."
    if ! command -v moosh > /dev/null 2>&1; then
        echo "Moosh is not installed. Please install and try again as moosh is used to set the config settings. Exiting."
        exit 1
    fi
fi

if [[ "$INSTALL_ACTIONS" == *"copy"* ]]; then
    echo "Downloading and unzipping OpenID Connect plugin files..."
    wget -O auth_oidc.zip $OIDC_PLUGIN_RELEASE_URL
    unzip auth_oidc.zip
    rm auth_oidc.zip
fi 

if [[ "$INSTALL_ACTIONS" == *"upgrade"* ]]; then
    cd "$MOODLE_PUBLIC"
    echo "Running Moodle upgrade..."
    php admin/cli/upgrade.php --non-interactive
fi

if [[ "$INSTALL_ACTIONS" == *"config"* ]]; then
    echo "Enabling oidc authentication method in Moodle config..."
    moosh auth-manage enable oidc
    echo "Disabling email-based self-registration..."
    moosh auth-manage disable email

    echo "Preventing automatic account creation on authentication..."
    moosh config-set authpreventaccountcreation 1

    echo "Configuring OIDC settings ..."
    echo "Identity provider type:"
    moosh config-set idptype 3 auth_oidc
    echo "Client ID:"
    moosh config-set clientid $AUTH_CLIENT_ID auth_oidc
    echo "Client secret:"
    moosh config-set clientsecret $AUTH_CLIENT_SECRET auth_oidc
    echo "Authorize endpoint:"
    moosh config-set authendpoint $AUTH_END_POINT auth_oidc
    echo "Token endpoint:"
    moosh config-set tokenendpoint $AUTH_TOKEN_END_POINT auth_oidc
    echo "Scopes:"
    moosh config-set oidcscope "openid profile roles email social_worker_record organisation" auth_oidc
    echo "Identity provider name:"
    moosh config-set providername "GOV.UK OneLogin" auth_oidc
    echo "Force redirect:"
    moosh config-set forceredirect 1 auth_oidc
    echo "Force login:"
    moosh config-set forcelogin 1
    echo "Silent login:"
    moosh config-set silentloginmode 1 auth_oidc
    echo "Single sign out:"
    moosh config-set single_sign_off 1 auth_oidc
    echo "Logout URI:"
    moosh config-set logouturi $AUTH_LOGOUT_URI auth_oidc
    echo "Binding username claim:"
    moosh config-set bindingusernameclaim email auth_oidc
    echo "OIDC resource:"
    moosh config-set oidcresource resource auth_oidc 

    echo "Clearing list of blocked cURL hosts and opening all cURL ports to allow for localhost connectivity..."
    echo "Curl blocked hosts:"
    moosh config-set curlsecurityblockedhosts ""
    echo "Curl allowed ports:"
    moosh config-set curlsecurityallowedport ""

    echo "Clearing cache to apply all settings changes..."
    moosh cache-clear
fi