##############################################################
# Stage 1: Basic Moodle install - requires local postgres db #
# (This stage is a builder, so it remains largely unchanged)  #
##############################################################

FROM moodlehq/moodle-php-apache:8.3-bookworm AS base-moodle-install-builder

ARG MOODLE_BRANCH_VERSION

WORKDIR /var/www

# Clone the Moodle source code.
RUN git clone -b MOODLE_${MOODLE_BRANCH_VERSION}_STABLE --single-branch --depth=1 git://git.moodle.org/moodle.git

# Prune folders and files beginning with '.' as well as other non-essential files
RUN find ./moodle -mindepth 1 -type d -name '.*' -exec rm -rf {} + && \
    find ./moodle -type f \( -name ".*" -o -name "*.md" -o -name "*.dist" -o -name "*.lock" \) -delete && \
    rm -f ./moodle/*.json && \
    rm -f ./moodle/*.js && \
    rm -f ./moodle/*.txt && \
    rm -f ./moodle/config-dist.php

RUN echo "Starting Moodle CLI installation..." \
    && cd moodle \
    && php admin/cli/install.php \
    --non-interactive \
    --agree-license \
    --wwwroot="http://localhost/" \
    --dbtype=pgsql \
    --dbhost=localhost \
    --dbname=moodle \
    --dbuser=postgres \
    --dbpass=postgres \
    --fullname="Social Work Induction Programme" \
    --shortname=SWIP \
    --adminpass=password \
    --adminemail=admin@example.com \
    && echo "Moodle installation complete."

######################################################
# Stage 2: Fully customised Moodle app with local DB #
######################################################

FROM moodlehq/moodle-php-apache:8.3-bookworm AS full-moodle-builder

ARG MOODLE_GOV_UK_THEME_VERSION
ARG MOODLE_OIDC_PLUGIN_RELEASE_URL
ARG PHP_COMPOSER_VERSION=2.6.5

# The theme script below runs the Moodle upgrade script from public/...
WORKDIR /var/www/html

# Copy the pruned / installed Moodle source
COPY --from=base-moodle-install-builder --chown=www-data:www-data /var/www/moodle/ ./public/

# Copy the moodledata directory created during the install
COPY --from=base-moodle-install-builder --chown=www-data:www-data /var/www/moodledata/ /var/www/moodledata/

# Install the custom GOVUK theme
COPY install-theme install-theme
RUN chmod +x install-theme \
    && ./install-theme ${MOODLE_GOV_UK_THEME_VERSION} \
    && rm install-theme

#- OPTIMIZATION: Install Composer in its own layer as it's a prerequisite for Moosh.
RUN curl -sS https://getcomposer.org/installer -o composer-setup.php \
    && php composer-setup.php --version=${PHP_COMPOSER_VERSION} --install-dir=/usr/local/bin --filename=composer \
    && rm composer-setup.php \
    && composer --version

#- OPTIMIZATION: Install Moosh and clean up the script in the same layer.
# Moosh is required to run the install-oidc-plugin script
COPY install-moosh install-moosh
RUN chmod +x install-moosh \
    && ./install-moosh \
    && rm install-moosh

#- OPTIMIZATION: Install temporary tools, use them, and remove them + the apt cache all in ONE layer.
# This prevents temporary build dependencies from bloating the builder image.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    wget \
    unzip \
    && mkdir -p /app \
    && chmod +x /app \
    && cd public \
    # We copy the scripts in and execute them here to keep the layer self-contained
    && copy ../../install-oidc-plugin /app/install-oidc-plugin \
    && copy ../../setup_moodle_webservice.php /app/setup_moodle_webservice.php \
    && chmod +x /app/install-oidc-plugin \
    && /app/install-oidc-plugin check,copy,upgrade ${MOODLE_OIDC_PLUGIN_RELEASE_URL} \
    # Now, clean up the build dependencies
    && apt-get purge -y --auto-remove wget unzip \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /app

###############################################################
# Stage 3: Fully customised Moodle app prepped for Azure DB   #
# (This is the final, optimized image)                        #
###############################################################

FROM moodlehq/moodle-php-apache:8.3-bookworm AS moodle-app

ARG AZURE_KUDU_SSH_USER
ARG FULL_TAG

WORKDIR /var/www/html/public

#- OPTIMIZATION: Install only essential runtime tools.
# Note: rsync might be a deployment-time tool. If it's not needed by the running container, consider removing it.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    postgresql-client \
    apache2-utils \
    rsync \
    && rm -rf /var/lib/apt/lists/*

# - OPTIMIZATION: Remote SSH is a significant security risk and adds a lot of size.
# For production images, it's highly recommended to remove this. For debugging,
# consider using `docker exec` or maintaining a separate Dockerfile.dev.
# I have commented this section out for the smallest possible image.
#
# COPY sshd_config /etc/ssh/sshd_config
# RUN --mount=type=secret,id=AZURE_KUDU_SSH_PASSWORD \
#     apt-get update && apt-get install -y --no-install-recommends openssh-server && \
#     export AZURE_KUDU_SSH_PASSWORD=$(cat /run/secrets/AZURE_KUDU_SSH_PASSWORD) \
#     && echo "$AZURE_KUDU_SSH_USER:$AZURE_KUDU_SSH_PASSWORD" | chpasswd \
#     && > /etc/motd \
#     && mkdir -p /var/run/sshd \
#     && chmod 0755 /var/run/sshd \
#     && cd /etc/ssh/ \
#     && ssh-keygen -A \
#     && rm -rf /var/lib/apt/lists/*

# Copy the pruned Moodle source / downloaded theme / data
COPY --from=full-moodle-builder --chown=www-data:www-data /var/www/ /var/www

# Copy custom config.php into the correct location
COPY config.php ./config.php

# Convenient way of checking / ensuring tag version
RUN echo "$FULL_TAG" > version.txt

# Needs to run as root for various standard mount point permissions in Azure
# Apache is configured to run as www-data
USER root

#- OPTIMIZATION: Instead of re-installing Composer and Moosh, copy the compiled
# executables from the builder stage. This is a huge saving as it avoids
# including PHP Composer and all its dependencies in the final image.
COPY --from=full-moodle-builder /root/.composer /root/.composer
COPY --from=full-moodle-builder /usr/local/bin/composer /usr/local/bin/composer
ENV PATH="/root/.composer/vendor/bin:${PATH}"

# Copy the application scripts
COPY entry-point.sh /app/entry-point.sh
COPY maintain-moodle.sh /app/maintain-moodle.sh
COPY save-env.sh /app/save-env.sh
COPY restore-env.sh /app/restore-env.sh
# We can copy the oidc plugin script from the builder stage as well
COPY --from=full-moodle-builder /app/install-oidc-plugin /app/install-oidc-plugin
COPY --from=full-moodle-builder /app/setup_moodle_webservice.php /app/setup_moodle_webservice.php
RUN chmod +x /app/*.sh

# Configure Apache
COPY apache-security.conf /etc/apache2/conf-enabled/security.conf
COPY apache-config-moodle.conf /etc/apache2/sites-available/000-default.conf
COPY apache-config-cron.conf /app/apache-config-cron.conf
RUN a2enmod headers

# Give the cron job some html to serve
COPY --chown=www-data:www-data index.html /var/www/html/public/index.html

CMD ["/app/entry-point.sh"]

EXPOSE 80
