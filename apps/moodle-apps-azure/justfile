set shell := ["bash", "-e", "-o", "pipefail", "-c"]

default:
  @just --list

install-tools:
  # Run temporary postgres DB in the background for the build process
  # Moodle requires this for upgrading, so we provide it for the install as well
  @docker run --rm -d \
      --name temp-postgres \
      --network=host \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=postgres \
      -e POSTGRES_DB=moodle \
      -p 5432:5432 \
      postgres:17.4

ci-install-tools:
  @just install-tools

restore:
  #!/bin/bash
  # The Moodle image build process requires these additional files to be sourced from the repo
  PHP_CONFIG_FILE="../moodle-docker/config.php"
  WEB_SERVICE_SETUP_FILE="../../scripts/setup_moodle_webservice.php"
  MOODLE_SCRIPTS_DIR="../moodle-ddev/.ddev/commands/web"
  DESTINATION_DIR="./"

  errors=0

  if [ ! -f "$WEB_SERVICE_SETUP_FILE" ]; then
    echo "Error: required file '$WEB_SERVICE_SETUP_FILE' not found." >&2
    errors=1
  fi

  if [ ! -f "$PHP_CONFIG_FILE" ]; then
    echo "Error: required file '$PHP_CONFIG_FILE' not found." >&2
    errors=1
  fi

  if [ ! -d "$MOODLE_SCRIPTS_DIR" ]; then
    echo "Error: directory '$MOODLE_SCRIPTS_DIR' not found." >&2
    errors=1
  elif [ -z "$(ls -A "$MOODLE_SCRIPTS_DIR")" ]; then
      echo "Error: no files to copy in '$MOODLE_SCRIPTS_DIR'." >&2
      errors=1
  fi

  # If any check failed, abort now
  if [ "$errors" -ne 0 ]; then
    echo "One or more required items are missing. Aborting..." >&2
    exit 1
  fi

  echo "Copying additional files for Docker Moodle image build..."
  cp "$PHP_CONFIG_FILE" "$DESTINATION_DIR"
  cp "$WEB_SERVICE_SETUP_FILE" "$DESTINATION_DIR"
  cp "$MOODLE_SCRIPTS_DIR"/* "$DESTINATION_DIR"

ci-restore:
  @just restore

build:
  # No specific build steps
  @true

ci-build:
  @just build

test:
  # No specific test steps
  @true

ci-test:
  @just test

package-component:
  # No specific package steps
  @true

ci-package-component:
  @just package-component

database-updates resource-group web-app-name full-image-tag:
  #!/bin/bash
  set -euo pipefail

  cleanup() {
    if [[ -s az.pid ]]; then
      PID=$(< az.pid)
      echo "Shutting down Azure tunnel (pid $PID)…"
      kill $PID || echo "Process $PID already exited"
      rm az.pid
    else
      echo "az.pid not found or empty; nothing to clean up"
    fi
  }

  trap cleanup EXIT

  # Install sshpass for remote SSH
  sudo apt-get update && sudo apt-get install -y sshpass

  ########################################################
  # Step 1: Retrieve / generate Moodle web service token #
  ########################################################

  # KEY_VAULT_NAME is provided by the Github Actions script, specifically calculated when
  # pulling back any app settings that refer to key vault secrets

  SECRET_NAME="Moodle-WebServiceToken"
  AZ_OUTPUT=$(az keyvault secret show \
    --vault-name "$KEY_VAULT_NAME" \
    --name "$SECRET_NAME" \
    --query value -o tsv 2>&1) \
    && { 
      MOODLE_WEB_SERVICE_TOKEN="$AZ_OUTPUT"
      # Make sure we don't echo the token to the logs
      echo "::add-mask::$MOODLE_WEB_SERVICE_TOKEN"
      echo "Retrieved Moodle web service token from key vault: $KEY_VAULT_NAME, $SECRET_NAME" >&2
    } || {
      AZ_RC=$?

      echo "❌ Failed fetching secret: $AZ_OUTPUT" >&2
      exit $AZ_RC
    }
    
  ##############################################################
  # Step 2: Establish background SSH connection to app service #
  # Do this as close as possible to the ssh session below.     #
  ##############################################################

  SSH_PORT=2222
  az webapp create-remote-connection \
    --resource-group "{{ resource-group }}" \
    --name "{{ web-app-name }}" \
    --port $SSH_PORT & 
  echo $! > az.pid

  CONNECTED=0
  echo "Waiting for local SSH tunnel on $SSH_PORT"
  for i in {1..300}; do
    if nc -z 127.0.0.1 $SSH_PORT; then
      echo "✅ SSH connection ready: {{ web-app-name }}"
      CONNECTED=1
      break
    fi
    sleep 1
  done

  if [[ $CONNECTED == "0" ]]; then
    echo "❌ SSH connection to port $SSH_PORT failed after 20 attempts." >&2
    exit 1
  fi

  #########################################################
  # Step 3: Carry out Moodle DB install / update over SSH #
  #########################################################

  # The SSH sesion doesn't inherit all of the variables from the app service / startup 
  # We pass any sensitive variables explicitly - these will have been fetched from the
  # web app settings earlier in the Github Actions run.

  sshpass -p "$AZURE_KUDU_SSH_PASSWORD" ssh \
  -T \
  -o TCPKeepAlive=no \
  -o ServerAliveInterval=15 \
  -o ServerAliveCountMax=3 \
  -o Ciphers=aes128-ctr \
  -o Compression=no \
  -o ExitOnForwardFailure=yes \
  -o StrictHostKeyChecking=no \
  -o UserKnownHostsFile=/dev/null \
  -p $SSH_PORT \
  $AZURE_KUDU_SSH_USER@127.0.0.1 <<EOF
  export MOODLE_ADMIN_PASSWORD="$MOODLE_ADMIN_PASSWORD"
  export POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
  export MOODLE_WEB_SERVICE_USER_PASSWORD="$MOODLE_WEB_SERVICE_USER_PASSWORD"
  export AUTH_SERVICE_CLIENT_SECRET="$AUTH_SERVICE_CLIENT_SECRET"
  export MOODLE_WEB_SERVICE_TOKEN="$MOODLE_WEB_SERVICE_TOKEN"
  set -euo pipefail

  echo "Starting Moodle database install / update"

  cd /app
  # Load all the variables into THIS shell - all of the non-sensitive env variables were
  # saved during container startup, so we could reuse them here.
  source ./restore-env.sh /app/env.txt

  # run the maintenance script (it must terminate)
  ./maintain-moodle.sh

  echo "✅ Moodle database install / update completed"

  exit
  EOF