// <auto-generated />
using System;
using System.Text.Json;
using Dfe.Sww.Ecf.Core.DataStore.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dfe.Sww.Ecf.Core.DataStore.Postgres.Migrations
{
    [DbContext(typeof(EcfDbContext))]
    [Migration("20250228162403_UpdateSchemaForOrganisationsAndPersonOrganisations")]
    partial class UpdateSchemaForOrganisationsAndPersonOrganisations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_name");

                    b.Property<DateTime>("Inserted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.HasKey("EventId")
                        .HasName("pk_events");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_events_key")
                        .HasFilter("key is not null");

                    b.HasIndex("Payload")
                        .HasDatabaseName("ix_events_payload");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Payload"), "gin");

                    b.HasIndex("PersonId", "EventName")
                        .HasDatabaseName("ix_events_person_id_event_name")
                        .HasFilter("person_id is not null");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("PersonId", "EventName"), new[] { "Payload" });

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.JourneyState", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("instance_id");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_id");

                    b.HasKey("InstanceId")
                        .HasName("pk_journey_states");

                    b.ToTable("journey_states", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.NameSynonyms", b =>
                {
                    b.Property<long>("NameSynonymsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("name_synonyms_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NameSynonymsId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.Property<string[]>("Synonyms")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("synonyms")
                        .UseCollation("case_insensitive");

                    b.HasKey("NameSynonymsId")
                        .HasName("pk_name_synonyms");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_name_synonyms_name");

                    b.ToTable("name_synonyms", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.OneLoginUser", b =>
                {
                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<DateTime>("FirstOneLoginSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_one_login_sign_in");

                    b.Property<DateTime?>("FirstSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_sign_in");

                    b.Property<string>("LastCoreIdentityVc")
                        .HasColumnType("jsonb")
                        .HasColumnName("last_core_identity_vc");

                    b.Property<DateTime>("LastOneLoginSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_one_login_sign_in");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in");

                    b.Property<int>("MatchRoute")
                        .HasColumnType("integer")
                        .HasColumnName("match_route");

                    b.Property<string>("MatchedAttributes")
                        .HasColumnType("jsonb")
                        .HasColumnName("matched_attributes");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int?>("VerificationRoute")
                        .HasColumnType("integer")
                        .HasColumnName("verification_route");

                    b.Property<string>("VerifiedDatesOfBirth")
                        .HasColumnType("jsonb")
                        .HasColumnName("verified_dates_of_birth");

                    b.Property<string>("VerifiedNames")
                        .HasColumnType("jsonb")
                        .HasColumnName("verified_names");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_on");

                    b.HasKey("Subject")
                        .HasName("pk_one_login_users");

                    b.ToTable("one_login_users", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("organisation_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<long>("MoodleCourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("moodle_course_id");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("organisation_name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("OrganisationId")
                        .HasName("pk_organisations");

                    b.HasIndex("MoodleCourseId")
                        .HasDatabaseName("ix_organisation_moodle_course_id");

                    b.ToTable("organisations", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_address")
                        .UseCollation("case_insensitive");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("NationalInsuranceNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character(9)")
                        .HasColumnName("national_insurance_number")
                        .IsFixedLength();

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Trn")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("PersonId")
                        .HasName("pk_persons");

                    b.HasIndex("Trn")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_trn")
                        .HasFilter("trn is not null");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.PersonOrganisation", b =>
                {
                    b.Property<Guid>("PersonOrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_organisation_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organisation_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("PersonOrganisationId")
                        .HasName("pk_person_organisations");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_person_organisation_organisation_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_organisation_person_id");

                    b.ToTable("person_organisations", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.PersonRole", b =>
                {
                    b.Property<Guid>("PersonRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_role_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_on")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("PersonRoleId")
                        .HasName("pk_person_roles");

                    b.HasIndex("PersonId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("uq_person_roles_person_id_role_id");

                    b.ToTable("person_roles", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.PersonSearchAttribute", b =>
                {
                    b.Property<long>("PersonSearchAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("person_search_attribute_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonSearchAttributeId"));

                    b.Property<string>("AttributeKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_key")
                        .UseCollation("case_insensitive");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_type")
                        .UseCollation("case_insensitive");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("attribute_value")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("PersonSearchAttributeId")
                        .HasName("pk_person_search_attributes");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_search_attributes_person_id");

                    b.HasIndex("AttributeType", "AttributeValue")
                        .HasDatabaseName("ix_person_search_attributes_attribute_type_and_value");

                    b.ToTable("person_search_attributes", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("pk_roles");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("uq_roles_role_name");

                    b.ToTable("roles", null, t =>
                        {
                            t.HasCheckConstraint("ck_roles_role_name", "role_name in ('EarlyCareerSocialWorker', 'Assessor', 'Coordinator')");
                        });

                    b.HasData(
                        new
                        {
                            RoleId = 400,
                            RoleName = "EarlyCareerSocialWorker"
                        },
                        new
                        {
                            RoleId = 600,
                            RoleName = "Assessor"
                        },
                        new
                        {
                            RoleId = 800,
                            RoleName = "Coordinator"
                        });
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.SupportTask", b =>
                {
                    b.Property<string>("SupportTaskReference")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("support_task_reference");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("OneLoginUserSubject")
                        .HasColumnType("character varying(255)")
                        .HasColumnName("one_login_user_subject");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SupportTaskType")
                        .HasColumnType("integer")
                        .HasColumnName("support_task_type");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<JsonDocument>("_data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.HasKey("SupportTaskReference")
                        .HasName("pk_support_tasks");

                    b.HasIndex("OneLoginUserSubject")
                        .HasDatabaseName("ix_support_tasks_one_login_user_subject");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_support_tasks_person_id");

                    b.ToTable("support_tasks", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.UserBase", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("application_type");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_type");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consent_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text")
                        .HasColumnName("json_web_key_set");

                    b.Property<string>("Permissions")
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_oidc_applications");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_applications_client_id");

                    b.ToTable("oidc_applications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_oidc_authorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_oidc_authorizations_application_id_status_subject_type");

                    b.ToTable("oidc_authorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("text")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_oidc_scopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_scopes_name");

                    b.ToTable("oidc_scopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid?>("AuthorizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redemption_date");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_oidc_tokens");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_tokens_reference_id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_oidc_tokens_application_id_status_subject_type");

                    b.ToTable("oidc_tokens", (string)null);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.SystemUser", b =>
                {
                    b.HasBaseType("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.UserBase");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a81394d1-a498-46d8-af3e-e077596ab303"),
                            Active = true,
                            Name = "System",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.User", b =>
                {
                    b.HasBaseType("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.UserBase");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email")
                        .UseCollation("case_insensitive");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("roles");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.OneLoginUser", b =>
                {
                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.OneLoginUser", "PersonId")
                        .HasConstraintName("fk_one_login_users_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.PersonOrganisation", b =>
                {
                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Organisation", "Organisation")
                        .WithMany("PersonOrganisations")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_organisations_organisation_id");

                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", "Person")
                        .WithMany("PersonOrganisations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_organisations_person_id");

                    b.Navigation("Organisation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.PersonRole", b =>
                {
                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", "Person")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_persons_person_id");

                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Role", "Role")
                        .WithMany("PersonRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_roles_role_id");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.SupportTask", b =>
                {
                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.OneLoginUser", null)
                        .WithMany()
                        .HasForeignKey("OneLoginUserSubject")
                        .HasConstraintName("fk_support_tasks_one_login_user");

                    b.HasOne("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_support_tasks_person");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_oidc_authorizations_oidc_applications_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<System.Guid>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_oidc_tokens_oidc_applications_application_id");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fk_oidc_tokens_oidc_authorizations_authorization_id");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Organisation", b =>
                {
                    b.Navigation("PersonOrganisations");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Person", b =>
                {
                    b.Navigation("PersonOrganisations");

                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("Dfe.Sww.Ecf.Core.DataStore.Postgres.Models.Role", b =>
                {
                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
